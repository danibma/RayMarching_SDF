#pragma kernel CSMain

static const float MINIMUM_HIT_DISTANCE = 0.001;
static const float MAXIMUM_TRACE_DISTANCE = 100.0;

struct Ray
{
	float3 Origin;
    float3 Direction;
};

struct ShapeData
{
	float3 position;
	float3 scale;
	float3 colour;
    float blendStrength;
	int shapeType;
    int operation;
};
StructuredBuffer<ShapeData> _Shapes;
int _ShapesNum;

Texture2D<float4> _Source;
RWTexture2D<float4> _Dest;

float4 _LightPos;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

// https://iquilezles.org/articles/smin/
float smin( float a, float b, float k )
{
    float h = max(k-abs(a - b), 0.0 ) / k;
    return min(a, b) - h * h * k * 0.25;
}

// https://iquilezles.org/articles/distfunctions/
float SphereSDF(float3 p, float3 center, float radius)
{
	return length(p - center) - radius;
}

float TorusSDF(float3 p, float3 center, float2 t)
{
  float2 q = float2(length(p.xz - center.xz) - t.x, p.y - center.y);
  return length(q) - t.y;
}

float BoxSDF(float3 p, float3 center, float3 b)
{
  float3 q = abs(p - center) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

Ray CreateRay(float2 uv)
{
	Ray ray;
    ray.Origin = mul(_CameraToWorld, float4(0, 0, -2, 1.0f)).xyz; // Camera pos
    ray.Direction = mul(_CameraToWorld, mul(_CameraInverseProjection, float4(uv, 1, 1))).xyz;
    ray.Direction = normalize(ray.Direction);

    return ray;
}

// first 3 floats = color
// last float = distance
float4 MapTheWorld(in float3 p)
{
    float4 result = MAXIMUM_TRACE_DISTANCE;
    for (int i = 0; i < _ShapesNum; ++i)
    {
		ShapeData shape = _Shapes[i];
        float sdf = 0.0f;
        if (shape.shapeType == 0)
			sdf = SphereSDF(p, shape.position, shape.scale.x);
        else if (shape.shapeType == 1)
            sdf = BoxSDF(p, shape.position, shape.scale);
        else if (shape.shapeType == 2)
            sdf = TorusSDF(p, shape.position, shape.scale.xy);

        if (shape.operation == 0)
        {
            if (sdf < result.w)
        		result.xyz = shape.colour;
	        result.w = min(sdf, result.w);
        }
        else if (shape.operation == 1)
        {
            if (result.w > sdf)
                result.xyz = shape.colour;

        	float oldDistance = abs(result.w - sdf);
	        result.w = smin(result.w, sdf, shape.blendStrength);

            bool bIsNewHit = result.w < MINIMUM_HIT_DISTANCE;
            bool bIsOldClose = (sdf - 1.0f) < MINIMUM_HIT_DISTANCE;
            if (bIsNewHit && bIsOldClose)
				result.xyz = lerp(shape.colour, result.xyz, oldDistance);
        }
        else if (shape.operation == 2)
        {
			result.w = max(result.w, -sdf);
        }
    }

    return result;
}

float3 CalculateNormal(in float3 p)
{
    const float3 small_step = float3(0.001, 0.0, 0.0);

    float gradient_x = MapTheWorld(p + small_step.xyy).w - MapTheWorld(p - small_step.xyy).w;
    float gradient_y = MapTheWorld(p + small_step.yxy).w - MapTheWorld(p - small_step.yxy).w;
    float gradient_z = MapTheWorld(p + small_step.yyx).w - MapTheWorld(p - small_step.yyx).w;

    float3 normal = float3(gradient_x, gradient_y, gradient_z);

    return normalize(normal);
}

// https://iquilezles.org/articles/rmshadows/
float Shadow(in Ray ray, float mint, float maxt, float k)
{
    float res = 1.0f;
    float t = mint;
    for(int i = 0; i < 256 && t < maxt; i++)
    {
        float4 h = MapTheWorld(ray.Origin + t * ray.Direction);
        if(h.w < MINIMUM_HIT_DISTANCE)
            return 0.1f;
        res = min(res, k * h.w / t);
        t += h.w;
    }
    return res;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    _Dest.GetDimensions(width, height);

    _Dest[id.xy] = _Source[id.xy];

    float2 uv = (id.xy / (float2(width, height))) * 2.0f - 1.0f;
    Ray ray = CreateRay(uv);

    float distanceTraveled = 0.0;
    while (distanceTraveled < MAXIMUM_TRACE_DISTANCE)
    {
        // Calculate our current position along the ray
        float3 current_position = ray.Origin + distanceTraveled * ray.Direction;

        float4 sceneInfo = MapTheWorld(current_position);

        if (sceneInfo.w < MINIMUM_HIT_DISTANCE) // hit
        {
            float3 normal = CalculateNormal(current_position);

            // Calculate the unit direction vector that points from the point of intersection to the light source
            float3 directionToLight = normalize(_LightPos.xyz - current_position);

            float diffuse = saturate(dot(directionToLight, normal));

            Ray shadowRay;
            shadowRay.Origin = current_position;
            shadowRay.Direction = directionToLight;
            float shadow = Shadow(shadowRay, 0.01f, 100.0f, 16);

            float3 color = sceneInfo.xyz;
            float3 finalColor = color * diffuse * shadow;
            _Dest[id.xy] = float4(finalColor, 1.0f);
            break;
        }

        // accumulate the distance traveled thus far
        distanceTraveled += sceneInfo.w;
    }
}
